Struktura projektu sdrive MySQL Node.JS .ejs
(
/sdrive
	/controllers
		auth.js (const express = require("express");
const register = require("../public/js/register")
const login = require("../public/js/login")
const logout = require("./logout")
const router = express.Router();

router.post("/register", register)
//router.post("/login", login)
//router.post("/logout", logout)

module.exports = router;)
		loggedin.js
		login.js
		logout.js
		register.js(const db = require("../routes/db-config");
const bcrypt = require("bcryptjs");

const register = async (req,res) => {

}
module.exports = register;)
	/node_modules
	/public
		/js
			login.js
			register.js (form.addEventListener("submit", () => {
    const register = {
        email: email.vaule,
        password: password.value
    }
    fetch("/api/register", {
        method: "POST",
        body: JSON.stringify(register),
        headers: {
            "Content-Type":"application/json"
        }
    }).then(res=> res.json())
        .then(data => {
            if (statusbar.status == "error") {
                success.style.display = "none"
                error.style.display = "block"
                error.innerText = data.error
            } else {
                error.style.display = "none"
                success.style.display = "block"
                success.innerText = data.success
            }
        })
})
)
		login.html (<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Strona logowania</title>
</head>
<body>
    <h1>Strona logowania</h1>
</body>
</html>)
		register.html		(<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Strona rejestracji</title>
</head>
<body>
    <h1>Strona rejestracji</h1>
    <form id="registerForm">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <br>
        <label for="password">Hasło:</label>
        <input type="password" id="password" name="password" required>
        <br>
        <button type="submit">Zarejestruj się</button>
    </form>

    <div id="success" style="display: none; color: green;">Rejestracja udana!</div>
    <div id="error" style="display: none; color: red;">Błąd rejestracji</div>

    <script src="js/register.js"></script> 
</body>
</html>
)
	/routes
		db-config.js (const sql = require("mysql")
const dotenv = require("dotenv").config();
const db = sql.createConnection({
    host:process.env.DATABASE_HOST,
    user:process.env.DATABASE_USER,
    password:process.env.DATABASE_PASSWORD,
    database:process.env.DATABASE
})

module.exports = db;)
		pages.js (const express = require("express");
const router = express.Router();

router.get("/", (req, res) =>{
    res.render("index");
})

router.get("/register", (req, res) =>{
    res.sendFile("register.html",{root:"./public"});
})

router.get("/login", (req, res) =>{
    res.sendFile("login.html",{root:"./public"});
})

module.exports = router;)
	/view
	.env (DATABASE_HOST = localhost
DATABASE_USER = sdrive
DATABASE_PASSWORD = 11tata11
DATABASE = sdrive_logins)
	index.js (const express = require("express");
const db = require("./routes/db-config");
const app = express();
const cookie = require("cookie-parser");

const path = require('path');
const PORT = process.env.PORT || 3000; 

app.use("/js", express.static(path.join(__dirname, "public/js")));
app.use("/css", express.static(path.join(__dirname, "public/css")));
app.use(cookie());
app.use(express.json());

app.set("view engine", "ejs");
app.set("views", "./views");


db.connect((err) => {
    if (err) throw err;
    console.log("Połączono z bazą danych");
});

app.use("/", require("./routes/pages"));
app.use("/api", require("./controllers/auth"));

app.listen(PORT, () => {
    console.log(`Serwer działa na porcie ${PORT}`);
});
)
	package-lock.json
	package.json
)


