sdrive node.js mysql .ejs

/controllers
	auth.js
	
	(const express = require("express");
const register = require("./register")
const login = require("./login")
const router = express.Router();

router.post("/register", register)
router.post("/login", login)


module.exports = router;)
	
	loggedin.js
	
	(const db = require("../routes/db-config")
const jwt = require("jsonwebtoken")
const loggedIn = (req, res, next) => {
    if (!req.cookies.userRegistered) return next();
    try {
        const decoded = jwt.verify(req.cookies.userRegistered, process.env.JWT_SECRET);
        dbquerry('SELECT * FROM users WHERE id = ?', [decoded.id], (err,result) =>{
            req.user = result[0];
            return next();
        })
    } catch (err) {
        if (err) return next()
    }
}
module.exports = loggedIn;)
	
	login.js
	
	(const jwt = require("jsonwebtoken");
const db = require("../routes/db-config");
const bcryptjs = require("bcryptjs");

const login = async (req, res) => {
    const { email, password } = req.body
    if (!email || !password) return res.json({status: "error", error: "Podaj swój email i hasło"});
    else {
        db.query('Select email FROM users WHERE email = ?', [email], async (Err, result) => {
            if (Err) throw Err;
            if (!result[0] || !await bcrypt.compare(password, result[0].password)) return res.json({status: "error",
                error: "Niepoprawne hasło lub email"})
                else {
                    const token = jwt.sign({ id: result[0].id }, process.env.JWT_SECRET, {
                        expiresIn:process.env.JWT_EXPIRES,
                        httpOnly:true
                    })
                    const cookieOptions = {
                        expiresIn: new Date(Date.now() + process.env.COOKIE_EXPIRES * 24 * 60 * 1000),
                        httpOnly:true
                    }
                    res.cookie("userRegistered", token, cookieOptions);
                    return res.json({status: "success", success: "Użytkownik został zalogowany"})
                }
        })
    }
}
module.exports = login;)
	
	logout.js
	
	(const logout = (req, res) => {
    res.clearCookie("userRegistered")
    res.redirect("/");
}

module.exports = logout;)
	
	register.js
	
	(const db = require("../routes/db-config");
const bcrypt = require("bcryptjs");

const register = async (req,res) => {
    const { email, password: Npassword } = req.body
    if (!email || !Npassword) return res.json({status: "error", error: "Podaj swój email i hasło"});
    else {
        console.log(email);
        db.querry('SELECT email FROM users WHERE email = ?', [email], async (err, result) => {
            if(err) throw err;
            if(result[0]) return res.json ({ status: "error", error: "Email już jest w systemie"})
            else {
                const password = await bcrypt.hash(Npassword, 8);
                console.log(password);
                db.querry ('INSERT INTO users SET ?', {email: email, password: password}, (error, results) => {
                    if (error) throw error;
                    return res.json({status: "success", success: "Użytkownik został zarejestrowany"})
                })
            }
        })
    }
}
module.exports = register;)
	
/public
	/css
		style.css
	/js
		login.js
		
		(form.addEventListener("submit", () => {
    const login = {
        email: email.vaule,
        password: password.value
    }
    fetch("/api/register", {
        method: "POST",
        body: JSON.stringify(login),
        headers: {
            "Content-Type":"application/json"
        }
    }).then(res=> res.json())
        .then(data => {
            if (statusbar.status == "error") {
                success.style.display = "none"
                error.style.display = "block"
                error.innerText = data.error
            } else {
                error.style.display = "none"
                success.style.display = "block"
                success.innerText = data.success
            }
        })
})
        )
		
		register.js
		
		(const form = document.getElementById("registerForm");

form.addEventListener("submit", () => {
    const register = {
        email: email.vaule,
        password: password.value
    }
    fetch("/api/register", {
        method: "POST",
        body: JSON.stringify(register),
        headers: {
            "Content-Type":"application/json"
        }
    }).then(res=> res.json())
        .then(data => {
            if (statusbar.status == "error") {
                success.style.display = "none"
                error.style.display = "block"
                error.innerText = data.error
            } else {
                error.style.display = "none"
                success.style.display = "block"
                success.innerText = data.success
            }
        })
})
)
		
/routes
	db-config.js
	
	(const sql = require("mysql")
const dotenv = require("dotenv").config();
const db = sql.createConnection({
    host:process.env.DATABASE_HOST,
    user:process.env.DATABASE_USER,
    password:process.env.DATABASE_PASSWORD,
    database:process.env.DATABASE
})

module.exports = db;)
	
	pages.js
	
	(const express = require("express");
const loggedIn = require("../controllers/loggedIn")
const logout = require("../controllers/logout")
const router = express.Router();

router.get("/", loggedIn, (req, res) =>{
    if (req.user){
        res.render("index",{status: "loggedIn", user: req.user});
    } else {
        res.render ("index", {status: "no", user: "nothing"});
    }
})

router.get("/register", (req, res) =>{
    res.sendFile("register.ejs",{root:"./public"});
})

router.get("/login", (req, res) =>{
    res.sendFile("login.ejs",{root:"./public"});
})

router.get("/logout", logout)
module.exports = router;)
	
/views
	login.ejs
	register.ejs
	welcome.ejs (adres /)
	
.env

(DATABASE_HOST = localhost
DATABASE_USER = sdrive
DATABASE_PASSWORD = 11tata11
DATABASE = sdrive_logins
JWT_SECRET = 743BTG8therwwifhbASDa04184SFD12310ei90QWEqui
JWT_EXPIRES = 90d
COOKIE_EXPIRES = 90)

index.js

(const express = require("express");
const db = require("./routes/db-config");
const app = express();
const cookie = require("cookie-parser");

const path = require('path');
const PORT = process.env.PORT || 3000; 

app.use("/js", express.static(path.join(__dirname, "/public/js")));
app.use("/css", express.static(path.join(__dirname, "/public/css")));
app.use(cookie());
app.use(express.json());

app.set("view engine", "ejs");
app.set("views", "./views");


db.connect((err) => {
    if (err) throw err;
    console.log("Połączono z bazą danych");
});

app.use("/", require("./routes/pages"));
app.use("/api", require("./controllers/auth"));

app.listen(PORT, () => {
    console.log(`Serwer działa na porcie ${PORT}`);
});
)
